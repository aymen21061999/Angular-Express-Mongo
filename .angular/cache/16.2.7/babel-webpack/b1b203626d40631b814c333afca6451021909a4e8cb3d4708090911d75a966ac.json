{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AppComponent = class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.title = 'AngularExpress';\n    this.userList = [];\n    this.expresponse = \"\";\n  }\n  getAllUsers() {\n    this.http.get('http://localhost:8000/getAll').subscribe(response => {\n      this.userList = response;\n      console.log(this.userList);\n    });\n  }\n  addUser(udata) {\n    console.log(udata);\n    console.log(udata.value);\n    this.userList.push(udata.value);\n    this.http.post('http://localhost:8000/insert', udata.value).subscribe(response => {\n      this.expresponse = response.toString();\n      //console.log(response);\n    });\n  }\n\n  deleteUser(userId) {\n    if (confirm('Are you sure you want to delete this user?')) {\n      this.http.delete(`http://localhost:8000/delete`, {\n        body: {\n          uid: userId\n        }\n      }).subscribe(response => {\n        console.log(response);\n        this.getAllUsers();\n      });\n    }\n  }\n  updateUser(user) {\n    const updatedUserData = {\n      userId: user.userId,\n      password: user.password,\n      emailId: user.emailId\n    };\n    this.http.put('http://localhost:8000/update', updatedUserData).subscribe(response => {\n      this.expresponse = response.toString();\n      this.getAllUsers(); // Optionally, you can update the user list after updating\n    });\n  }\n};\n\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","AppComponent","constructor","http","title","userList","expresponse","getAllUsers","get","subscribe","response","console","log","addUser","udata","value","push","post","toString","deleteUser","userId","confirm","delete","body","uid","updateUser","user","updatedUserData","password","emailId","put","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Frontend Concepts\\ANGULAR\\AngularExpressMongo\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";    //import\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'AngularExpress';\n  userList : any =[];\n  data : any;\n  expresponse : string=\"\";\n  constructor(private http : HttpClient){\n  }\n  getAllUsers(){\n    this.http.get('http://localhost:8000/getAll').subscribe((response)=>{\n      this.userList = response;\n      console.log(this.userList);\n    });\n  }\n  addUser(udata : any){\n    console.log(udata);\n    console.log(udata.value);\n    this.userList.push(udata.value);\n    this.http.post('http://localhost:8000/insert',udata.value).subscribe((response)=>{\n    this.expresponse=response.toString();  \n    //console.log(response);\n    });\n  }\n\n  deleteUser(userId: string) {\n    if (confirm('Are you sure you want to delete this user?')) {\n      this.http.delete(`http://localhost:8000/delete`, { body: { uid: userId } }).subscribe((response) => {\n        console.log(response);\n        this.getAllUsers();\n      });\n    }\n  }\n \n  updateUser(user: any) {\n    const updatedUserData = {\n      userId: user.userId, // Use \"userId\"\n      password: user.password, // Include the updated data\n      emailId: user.emailId,\n    };\n \n    this.http.put('http://localhost:8000/update', updatedUserData).subscribe((response) => {\n      this.expresponse = response.toString();\n      this.getAllUsers(); // Optionally, you can update the user list after updating\n    });\n  }\n  \n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAKvBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IAJxB,KAAAC,KAAK,GAAG,gBAAgB;IACxB,KAAAC,QAAQ,GAAQ,EAAE;IAElB,KAAAC,WAAW,GAAU,EAAE;EAEvB;EACAC,WAAWA,CAAA;IACT,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,8BAA8B,CAAC,CAACC,SAAS,CAAEC,QAAQ,IAAG;MAClE,IAAI,CAACL,QAAQ,GAAGK,QAAQ;MACxBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,QAAQ,CAAC;IAC5B,CAAC,CAAC;EACJ;EACAQ,OAAOA,CAACC,KAAW;IACjBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;IAClBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAACC,KAAK,CAAC;IACxB,IAAI,CAACV,QAAQ,CAACW,IAAI,CAACF,KAAK,CAACC,KAAK,CAAC;IAC/B,IAAI,CAACZ,IAAI,CAACc,IAAI,CAAC,8BAA8B,EAACH,KAAK,CAACC,KAAK,CAAC,CAACN,SAAS,CAAEC,QAAQ,IAAG;MACjF,IAAI,CAACJ,WAAW,GAACI,QAAQ,CAACQ,QAAQ,EAAE;MACpC;IACA,CAAC,CAAC;EACJ;;EAEAC,UAAUA,CAACC,MAAc;IACvB,IAAIC,OAAO,CAAC,4CAA4C,CAAC,EAAE;MACzD,IAAI,CAAClB,IAAI,CAACmB,MAAM,CAAC,8BAA8B,EAAE;QAAEC,IAAI,EAAE;UAAEC,GAAG,EAAEJ;QAAM;MAAE,CAAE,CAAC,CAACX,SAAS,CAAEC,QAAQ,IAAI;QACjGC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;QACrB,IAAI,CAACH,WAAW,EAAE;MACpB,CAAC,CAAC;;EAEN;EAEAkB,UAAUA,CAACC,IAAS;IAClB,MAAMC,eAAe,GAAG;MACtBP,MAAM,EAAEM,IAAI,CAACN,MAAM;MACnBQ,QAAQ,EAAEF,IAAI,CAACE,QAAQ;MACvBC,OAAO,EAAEH,IAAI,CAACG;KACf;IAED,IAAI,CAAC1B,IAAI,CAAC2B,GAAG,CAAC,8BAA8B,EAAEH,eAAe,CAAC,CAAClB,SAAS,CAAEC,QAAQ,IAAI;MACpF,IAAI,CAACJ,WAAW,GAAGI,QAAQ,CAACQ,QAAQ,EAAE;MACtC,IAAI,CAACX,WAAW,EAAE,CAAC,CAAC;IACtB,CAAC,CAAC;EACJ;CAED;;AA7CYN,YAAY,GAAA8B,UAAA,EALxB/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACWjC,YAAY,CA6CxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}